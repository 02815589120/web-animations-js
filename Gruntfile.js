module.exports = function(grunt) {
  grunt.loadNpmTasks('grunt-contrib-uglify');
  grunt.loadNpmTasks('grunt-gjslint');
  grunt.loadNpmTasks('grunt-checkrepo');
  grunt.loadNpmTasks('grunt-karma');
  grunt.loadNpmTasks('grunt-saucelabs');
  grunt.loadNpmTasks('grunt-git-status');
  grunt.loadNpmTasks('grunt-template');

  var targetConfig = require('./target-config.js');

  var config = {
    uglify: {},
    gen: {},
    template: {}
  };

  function uglify(sources, target, options) {
    config.uglify[target] = {
      options: {
        sourceMap: true,
        sourceMapName: target + '.map',
        banner: grunt.file.read('templates/boilerplate'),
        wrap: true,
        compress: {
          global_defs: options,
          dead_code: true
        },
        mangle: {
          eval: true
        },
      },
      nonull: true,
      dest: target,
      src: sources
    };
    return target;
  }

  function gen(sources, target) {
    var suffix = target == targetConfig.defaultTarget ? '' : '-' + target
    generateFromTemplate('templates/web-animations.js', {target: target}, 'web-animations' + suffix + '.js');
    generateFromTemplate('templates/web-animations.html', {src: sources}, 'web-animations' + suffix + '.html');
    generateFromTemplate('templates/runner.html', {target: target}, 'test/runner' + suffix + '.html');
  }

  function generateFromTemplate(source, data, target) {
    var targetSpec = {};
    targetSpec[target] = [source];
    config.template[target] = {
      options: {
        data: data
      },
      files: targetSpec
    }
    return target;
  }

  var minifillConfig = {
    WEB_ANIMATIONS_TESTING: false
  };

  uglify(targetConfig.minifill.src, 'web-animations-minifill.min.js', minifillConfig);
  uglify(targetConfig.maxifill.src, 'web-animations.min.js', minifillConfig);

  gen(targetConfig.minifill.src, 'minifill');
  gen(targetConfig.maxifill.src, 'maxifill');

  var testTargets = {'minifill': {}, 'maxifill': {}};

  grunt.initConfig({
    uglify: config.uglify,
    gen: config.gen,
    template: config.template,
    checkrepo: {
      all: {
        clean: true,
      },
    },
    'git-status': {
      all: {
      },
    },
    gjslint: {
      options: {
        flags: [
          '--nojsdoc',
          '--strict',
          '--disable 7,121,110', //   7: Wrong blank line count
                                 // 121: Illegal comma at end of object literal
                                 // 110: Line too long
        ],
        reporter: {
          name: 'console'
        }
      },
      all: {
        src: [
          'src/*.js',
          'test/*.js',
          'test/js/*.js',
        ],
      }
    },
    test: testTargets,
    sauce: testTargets,
  });


  grunt.task.registerMultiTask('test', 'Run <target> tests under Karma', function() {
    var done = this.async();
    var karmaConfig = require('karma/lib/config').parseConfig(require('path').resolve('test/karma-config.js'), {});
    var config = targetConfig[this.target];
    karmaConfig.files = ['test/runner.js'].concat(config.src, config.test);
    var karmaServer = require('karma').server;
    karmaServer.start(karmaConfig, function(exitCode) {
      done(exitCode === 0);
    });
  });

  grunt.task.registerMultiTask('sauce', 'Run <target> tests under Karma on Saucelabs', function() {
    var done = this.async();
    var karmaConfig = require('karma/lib/config').parseConfig(require('path').resolve('test/karma-config-ci.js'), {});
    var config = targetConfig[this.target];
    karmaConfig.files = ['test/runner.js'].concat(config.src, config.test);
    karmaConfig.sauceLabs.testName = 'web-animation-next ' + this.target + ' Unit tests';
    var karmaServer = require('karma').server;
    karmaServer.start(karmaConfig, function(exitCode) {
      done(exitCode === 0);
    });
  });

  grunt.task.registerTask('clean', 'Remove files generated by grunt', function() {
    grunt.file.expand('web-animations-*').concat(grunt.file.expand('test/runner-*.html')).forEach(function(file) {
      grunt.file.delete(file);
      grunt.log.writeln('File ' + file + ' removed');
    });
  });

  for (var target in targetConfig) {
    grunt.task.registerTask(target, [
      'uglify:' + target,
      'gen:' + target,
      'gjslint',
    ]);
  }

  grunt.task.registerTask('default', ['uglify', 'template', 'gjslint']);
};
