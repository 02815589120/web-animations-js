module.exports = function(grunt) {
  grunt.loadNpmTasks('grunt-contrib-uglify');
  grunt.loadNpmTasks('grunt-gjslint');

  var targetConfig = require('./target-config.js');

  var uglifyTargets = {};
  var genimportTargets = {};
  var gendevTargets = {};
  var gentestTargets = {};
  var testTargets = {};
  for (var target in targetConfig) {
    var suffix = target === targetConfig.defaultTarget ? '' : '-' + target;
    uglifyTargets[target] = {
      options: {
        sourceMap: true,
        sourceMapName: 'web-animations' + suffix + '.min.js.map',
        banner: grunt.file.read('templates/boilerplate'),
        wrap: true,
        compress: {
          global_defs: {
            "WEB_ANIMATIONS_TESTING": false
          },
          dead_code: true
        },
        mangle: {
          eval: true
        },
      },
      nonull: true,
      dest: 'web-animations' + suffix + '.min.js',
      src: targetConfig[target].src,
    };
    gentestTargets[target] = targetConfig[target];
    genimportTargets[target] = targetConfig[target];
    gendevTargets[target] = targetConfig[target];
    testTargets[target] = {};
  }

  grunt.initConfig({
    uglify: uglifyTargets,
    gendev: gendevTargets,
    genimport: genimportTargets,
    gentest: gentestTargets,
    gjslint: {
      options: {
        flags: [
          '--nojsdoc',
          '--strict',
          '--disable 7,121,110', //   7: Wrong blank line count
                                 // 121: Illegal comma at end of object literal
                                 // 110: Line too long
        ],
        reporter: {
          name: 'console'
        }
      },
      all: {
        src: [
          'src/*.js',
          'test/*.js',
          'test/js/*.js',
        ],
      }
    },
    test: testTargets,
  });

  grunt.task.registerMultiTask('gendev', 'Generate web-animations-<target>.js', function() {
    var template = grunt.file.read('templates/web-animations.js')
    var filename = 'web-animations' + (this.target === targetConfig.defaultTarget ? '' : '-' + this.target) + '.js';
    var contents = grunt.template.process(template, {data: {target: this.target}});
    grunt.file.write(filename, contents);
    grunt.log.writeln('File ' + filename + ' created');
  });

  grunt.task.registerMultiTask('genimport', 'Generate web-animations-<target>.html', function() {
    var template = grunt.file.read('templates/web-animations.html')
    var filename = 'web-animations' + (this.target === targetConfig.defaultTarget ? '' : '-' + this.target) + '.html';
    var config = targetConfig[this.target];
    var contents = grunt.template.process(template, {data: {src: config.src}});
    grunt.file.write(filename, contents);
    grunt.log.writeln('File ' + filename + ' created');
  });

  grunt.task.registerMultiTask('gentest', 'Generate test/runner-<target>.html', function() {
    var template = grunt.file.read('templates/runner.html')
    var filename = 'test/runner' + (this.target === targetConfig.defaultTarget ? '' : '-' + this.target) + '.html';
    var contents = grunt.template.process(template, {data: {target: this.target}});
    grunt.file.write(filename, contents);
    grunt.log.writeln('File ' + filename + ' created');
  });

  grunt.task.registerMultiTask('test', 'Run <target> tests under Karma', function() {
    var done = this.async();
    var karmaConfig = require('./test/karma-config.js');
    var config = targetConfig[this.target];
    karmaConfig.files = ['test/runner.js'].concat(config.src, config.test);
    var karmaServer = require('karma').server;
    karmaServer.start(karmaConfig, function(exitCode) {
      done(exitCode === 0);
    });
  });

  grunt.task.registerTask('clean', 'Remove files generated by grunt', function() {
    grunt.file.expand('web-animations-*').concat(grunt.file.expand('test/runner-*.html')).forEach(function(file) {
      grunt.file.delete(file);
      grunt.log.writeln('File ' + file + ' removed');
    });
  });

  for (var target in targetConfig) {
    grunt.task.registerTask(target, [
      'uglify:' + target,
      'genimport:' + target,
      'gentest:' + target,
      'gjslint',
    ]);
  }

  grunt.task.registerTask('default', ['uglify', 'genimport', 'gentest', 'gjslint']);
};
